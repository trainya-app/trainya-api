generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Goal {
  id          Int          @id @default(autoincrement())
  description String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  memberGoal  MemberGoal[]

  @@map("goals")
}

/// /Normalization model for members and goals as N in cardinality
model MemberGoal {
  id               Int      @id @default(autoincrement())
  goal_id          Int?
  member_id        Int
  created_at       DateTime @default(now())
  current_progress Int
  desired_progress Int
  finish_at        String
  finished_at      String
  started_at       String
  updated_at       DateTime @updatedAt
  goal             Goal?    @relation(fields: [goal_id], references: [id])
  member           Member   @relation(fields: [member_id], references: [id], onDelete: NoAction)

  @@index([goal_id], map: "members_goals_goal_id_fkey")
  @@index([member_id], map: "members_goals_member_id_fkey")
  @@map("members_goals")
}

model Member {
  id                       Int                        @id @default(autoincrement())
  adress_number            String?
  city                     String?
  created_at               DateTime                   @default(now())
  email                    String
  height                   Decimal
  name                     String                     @db.VarChar(256)
  password                 String
  phone                    String
  state                    String?
  street                   String?                    @db.VarChar(256)
  updated_at               DateTime                   @updatedAt
  weight                   Decimal
  at_gym                   Boolean?                   @default(false)
  avatar_url               String?
  birth_date               String
  gymMember                GymMember[]
  MonthDayProgress         MemberMonthDayProgress[]
  MemberPhotoProgress      MemberPhotoProgress[]
  memberGoal               MemberGoal[]
  memberWorkoutPlan        MemberWorkoutPlan[]
  memberworkoutplanworkout MemberWorkoutPlanWorkout[] @relation("membersTomemberworkoutplanworkout")

  @@map("members")
}

model Document {
  id               Int                @id @default(autoincrement())
  created_at       DateTime           @default(now())
  name             String
  updated_at       DateTime           @updatedAt
  employeeDocument EmployeeDocument[]

  @@map("documents")
}

/// /Normalization model for members and workout_plans as N in cardinality
model MemberWorkoutPlan {
  id               Int         @id @default(autoincrement())
  created_at       DateTime    @default(now())
  finish_at        String
  finished_at      String?
  started_at       String?
  updated_at       DateTime    @updatedAt
  member_id        Int
  workouts_plan_id Int
  member           Member      @relation(fields: [member_id], references: [id], onDelete: Cascade)
  workoutPlan      WorkoutPlan @relation(fields: [workouts_plan_id], references: [id], onDelete: NoAction)

  @@index([member_id], map: "members_workouts_plans_member_id_fkey")
  @@index([workouts_plan_id], map: "members_workouts_plans_workouts_plan_id_fkey")
  @@map("members_workouts_plans")
}

model WorkoutPlan {
  id                 Int                  @id @default(autoincrement())
  created_at         DateTime             @default(now())
  goal               String               @db.VarChar(256)
  updated_at         DateTime             @updatedAt
  employee_id        Int
  employee           Employee             @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  memberWorkoutPlan  MemberWorkoutPlan[]
  workoutPlanWorkout WorkoutPlanWorkout[]

  @@index([employee_id], map: "workouts_plans_employee_id_fkey")
  @@map("workouts_plans")
}

/// /Normalization model for workout_plans and workout as N in cardinality
model WorkoutPlanWorkout {
  id                       Int                        @id @default(autoincrement())
  workout_id               Int
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  workouts_plan_id         Int
  workout                  Workout                    @relation(fields: [workout_id], references: [id], onDelete: NoAction)
  workoutsPlan             WorkoutPlan                @relation(fields: [workouts_plan_id], references: [id], onDelete: NoAction)
  memberworkoutplanworkout MemberWorkoutPlanWorkout[] @relation("memberworkoutplanworkoutToworkouts_plans_workouts")

  @@index([workout_id], map: "workouts_plans_workouts_workout_id_fkey")
  @@index([workouts_plan_id], map: "workouts_plans_workouts_workouts_plan_id_fkey")
  @@map("workouts_plans_workouts")
}

model Workout {
  id                 Int                  @id @default(autoincrement())
  created_at         DateTime             @default(now())
  description        String?              @db.VarChar(256)
  duration           String
  level              String?
  preview_image_url  String?              @db.VarChar(256)
  title              String
  type               String?
  updated_at         DateTime             @updatedAt
  employee_id        Int
  employee           Employee             @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  workoutExercise    WorkoutExercise[]
  workoutPlanWorkout WorkoutPlanWorkout[]

  @@index([employee_id], map: "workouts_employee_id_fkey")
  @@map("workouts")
}

/// /Normalization model for workouts and exercises as N in cardinality
model WorkoutExercise {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  duration    Int
  repetitions Int
  sets        Int
  updated_at  DateTime @updatedAt
  exercise_id Int
  workout_id  Int
  exercise    Exercise @relation(fields: [exercise_id], references: [id], onDelete: NoAction)
  workout     Workout  @relation(fields: [workout_id], references: [id], onDelete: NoAction)

  @@index([exercise_id], map: "workouts_exercises_exercise_id_fkey")
  @@index([workout_id], map: "workouts_exercises_workout_id_fkey")
  @@map("workouts_exercises")
}

model Exercise {
  id              Int               @id @default(autoincrement())
  created_at      DateTime          @default(now())
  name            String
  needs_equipment Boolean
  updated_at      DateTime          @updatedAt
  comment         String?           @db.VarChar(256)
  video_url       String?           @db.VarChar(256)
  workoutExercise WorkoutExercise[]

  @@map("exercises")
}

model Employee {
  id                Int                @id @default(autoincrement())
  birth_date        String?
  created_at        DateTime           @default(now())
  daily_workload    Int?
  email             String             @db.VarChar(256)
  name              String             @db.VarChar(256)
  password          String             @db.VarChar(256)
  phone             String?
  updated_at        DateTime           @updatedAt
  weekdays_workload Int?
  payment_date      DateTime?
  profile_img       String?
  wage              Int?
  role_id           Int
  role              Role               @relation(fields: [role_id], references: [id], onDelete: NoAction)
  employeeDocument  EmployeeDocument[]
  gymEmployee       GymEmployee[]
  workout           Workout[]
  workoutPlan       WorkoutPlan[]

  @@index([role_id], map: "employees_role_id_fkey")
  @@map("employees")
}

model Role {
  id           Int        @id @default(autoincrement())
  title        String
  access_level String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  employee     Employee[]

  @@map("roles")
}

/// /Normalization model for employees and documents as N in cardinality
model EmployeeDocument {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  value       String
  document_id Int
  employee_id Int
  document    Document @relation(fields: [document_id], references: [id], onDelete: NoAction)
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@index([document_id], map: "employees_documents_document_id_fkey")
  @@index([employee_id], map: "employees_documents_employee_id_fkey")
  @@map("employees_documents")
}

model Gym {
  id               Int           @id @default(autoincrement())
  city             String
  created_at       DateTime      @default(now())
  email            String
  name             String        @db.VarChar(256)
  password         String        @db.VarChar(256)
  state            String
  street           String        @db.VarChar(256)
  updated_at       DateTime      @updatedAt
  adress_number    Int
  zip_code         Int
  current_capacity Int
  max_capacity     Int
  gymEmployee      GymEmployee[]
  gymMember        GymMember[]

  @@map("gyms")
}

/// /Normalization model for gyms and employees as N in cardinality
model GymEmployee {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  employee_id Int
  gym_id      Int
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  gym         Gym      @relation(fields: [gym_id], references: [id], onDelete: NoAction)

  @@index([employee_id], map: "gyms_employees_employee_id_fkey")
  @@index([gym_id], map: "gyms_employees_gym_id_fkey")
  @@map("gyms_employees")
}

/// /Normalization model for gyms and members as N in cardinality
model GymMember {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  gym_id     Int
  member_id  Int
  gym        Gym      @relation(fields: [gym_id], references: [id], onDelete: NoAction)
  member     Member   @relation(fields: [member_id], references: [id], onDelete: Cascade)

  @@index([gym_id], map: "gyms_members_gym_id_fkey")
  @@index([member_id], map: "gyms_members_member_id_fkey")
  @@map("gyms_members")
}

/// / Terms Section
model TermAndCondition {
  id         Int      @id @default(autoincrement())
  title      String   @default("Termos e Condições")
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@fulltext([content])
  @@map("terms_and_conditions")
}

model PrivacyPolicie {
  id         Int      @id @default(autoincrement())
  title      String   @default("Políticas de Privacidade")
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@fulltext([content])
  @@map("privacy_policies")
}

model Month {
  id                  Int                      @id @default(autoincrement())
  name                String
  created_at          DateTime                 @default(now())
  updated_at          DateTime                 @updatedAt
  MonthDayProgress    MemberMonthDayProgress[]
  MemberPhotoProgress MemberPhotoProgress[]

  @@map("months")
}

model MemberMonthDayProgress {
  id               Int      @id @default(autoincrement())
  member_id        Int
  month_id         Int
  current_progress Int      @default(0)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  member           Member   @relation(fields: [member_id], references: [id], onDelete: Cascade)
  month            Month    @relation(fields: [month_id], references: [id], onDelete: NoAction)

  @@index([member_id], map: "member_months_day_progress_member_id_fkey")
  @@index([month_id], map: "member_months_day_progress_month_id_fkey")
  @@map("member_months_day_progress")
}

model MemberPhotoProgress {
  id              Int      @id @default(autoincrement())
  member_id       Int
  month_id        Int
  firstPhoto_url  String?
  secondPhoto_url String?
  thirdPhoto_url  String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  member          Member   @relation(fields: [member_id], references: [id], onDelete: Cascade)
  month           Month    @relation(fields: [month_id], references: [id], onDelete: NoAction)

  @@index([member_id], map: "member_photos_progress_member_id_fkey")
  @@index([month_id], map: "member_photos_progress_month_id_fkey")
  @@map("member_photos_progress")
}

model MemberWorkoutPlanWorkout {
  id                      Int                 @id @default(autoincrement())
  is_complete             Boolean
  memberId                Int?
  workoutPlanWorkoutId    Int?
  created_at              DateTime            @default(now())
  updated_at              DateTime
  members                 Member?             @relation("membersTomemberworkoutplanworkout", fields: [memberId], references: [id], map: "MemberWorkoutPlanWorkout_memberId_fkey")
  workouts_plans_workouts WorkoutPlanWorkout? @relation("memberworkoutplanworkoutToworkouts_plans_workouts", fields: [workoutPlanWorkoutId], references: [id], map: "MemberWorkoutPlanWorkout_workoutPlanWorkoutId_fkey")

  @@index([memberId], map: "MemberWorkoutPlanWorkout_memberId_fkey")
  @@index([workoutPlanWorkoutId], map: "MemberWorkoutPlanWorkout_workoutPlanWorkoutId_fkey")
}

model terms {
  id      Int    @id @default(autoincrement())
  title   String @default("Termos e Condições")
  content String @db.Text

  @@fulltext([content])
}
